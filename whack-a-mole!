
import SwiftUI

struct ContentView: View {
    @State private var molePositions: [Bool] = Array(repeating: false, count: 9)
    @State private var score = 0
    @State private var timeRemaining = 30
    @State private var gameTimer: Timer?
    @State private var moleTimer: Timer?
    
    let columns = [
        GridItem(.flexible()),
        GridItem(.flexible()),
        GridItem(.flexible())
    ]
    var body: some View {
        VStack {
            Text("Whack-a-Mole!")
                .font(.largeTitle)
                .padding()
            
            Text("Score: \(score)")
                .font(.title2)
            
            Text("Time: \(timeRemaining)")
                .font(.title2)
                .padding(.bottom)
            LazyVGrid(columns: columns, spacing: 20) {
                            ForEach(0..<9) { index in
                                ZStack {
                                    Circle()
                                        .fill(Color.gray)
                                        .frame(width: 80, height: 80)
                                    
                                    if molePositions[index] {
                                        Image("mole") // Replace "mole" with the actual image name
                                            .resizable()
                                            .scaledToFit()
                                            .frame(width: 60, height: 60)
                                            .onTapGesture {
                                                whackMole(at: index)
                                            }
                                    }

                                }
                            }
                        }
            Button(action: startGame) {
                            Text("Start Game")
                                .padding()
                                .foregroundColor(.white)
                                .background(Color.green)
                                .cornerRadius(10)
                        }
                        .padding(.top)
                    }
                    .padding()
                }
                
                func startGame() {
                    score = 0
                    timeRemaining = 30
                    molePositions = Array(repeating: false, count: 9)
                    gameTimer?.invalidate()
                            moleTimer?.invalidate()
                            
                            gameTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
                                if timeRemaining > 0 {
                                    timeRemaining -= 1
                                } else {
                                    gameTimer?.invalidate()
                                    moleTimer?.invalidate()
                                }
                            }
                            
                            moleTimer = Timer.scheduledTimer(withTimeInterval: 0.9, repeats: true) { _ in
                                showRandomMole()
                            }
                               }
                               
                               func showRandomMole() {
                                   molePositions = Array(repeating: false, count: 9)
                                   let randomIndex = Int.random(in: 0..<9)
                                   molePositions[randomIndex] = true
                               }
                               
                               func whackMole(at index: Int) {
                                   if molePositions[index] {
                                       score += 1
                                       molePositions[index] = false
                                   }
                               }
                           }

                           struct ContentView_Previews: PreviewProvider {
                               static var previews: some View {
                                   ContentView()
                               }
                           }
